plugins {
	id 'com.github.johnrengelman.shadow' version '5.0.0'
	id 'java'
}

apply from: 'helper.gradle'


defaultTasks 'build'


group 'protocolsupport'
version '1.4.dev'
sourceCompatibility = JavaVersion.VERSION_1_8

File librariesRuntimeDirectory = new File("libraries_runtime")
File librariesShadeDirectory = new File("libraries_shade")
File targetJarDirectory = new File("target")
String resourcesDirectoryName = "resources";

task setupFolders(type: DefaultTask) {doLast{
	librariesRuntimeDirectory.mkdirs()
	librariesShadeDirectory.mkdirs()
	targetJarDirectory.mkdirs()
}}

task updateRuntimeLibraries(type: UpdateLibrariesTask) {
	directory = librariesRuntimeDirectory
	libraries = [
		[url: "https://papermc.io/ci/job/Waterfall/lastSuccessfulBuild/artifact/Waterfall-Proxy/bootstrap/target/Waterfall.jar", name: "bungeecord-6.jar"]
	]
}

task updateShadeLibraries(type: UpdateLibrariesTask) {
	directory = librariesShadeDirectory
	libraries = []
}


sourceSets {
	main {
		java {
			srcDirs = ['src']
		}
		resources {
			srcDirs = ['resources']
		}
	}
}

repositories {
	mavenCentral()
}

dependencies {
	shadow fileTree(dir: librariesRuntimeDirectory, include: '*.jar')
	compile fileTree(dir: librariesShadeDirectory, include: '*.jar')
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
	compile group: 'it.unimi.dsi', name: 'fastutil', version: '8.2.2'
}

compileJava {
	doFirst {
	    classpath -= configurations.shadow
	    classpath += configurations.shadow
	}

	options.encoding = 'UTF-8'
	options.incremental = false
}

shadowJar {
	doFirst {
		new File(destinationDir, archiveName).delete()
	}

	from sourceSets.main.java.srcDirs
	from 'LICENSE'

	archiveName = jar.archiveName

	exclude 'META-INF/**'
	relocate 'org.apache', 'protocolsupport.libs.org.apache'
	relocate 'it.unimi.dsi.fastutil', 'protocolsupport.libs.it.unimi.dsi.fastutil'

	minimize()
}


task postprocessFatJar(type: Zip) {
	File originalJar = new File(shadowJar.destinationDir, shadowJar.archiveName)

	archiveName = shadowJar.archiveName

	from(zipTree(originalJar)) {
        exclude 'META-INF/**'
	}
}

task copyFinalJarToTarget(type: DefaultTask) {doLast{
	java.nio.file.Files.copy(
		postprocessFatJar.archivePath.getAbsoluteFile().toPath(),
		new File(targetJarDirectory, jar.baseName + '.jar').getAbsoluteFile().toPath(),
		java.nio.file.StandardCopyOption.REPLACE_EXISTING
	)
}}


compileJava.dependsOn(clean)
compileJava.dependsOn(setupFolders)
compileJava.dependsOn(updateRuntimeLibraries)
compileJava.dependsOn(updateShadeLibraries)
jar.enabled = false
jar.finalizedBy(shadowJar)
shadowJar.finalizedBy(postprocessFatJar)
postprocessFatJar.finalizedBy(copyFinalJarToTarget)
